import lejos.nxt.*;

package de.tuhh.diss.plotbot;

/**
 * This Class is used for control of the plotting robot. A great amount of time should spend for controlling the robot.
 * Add a suitable constructor and add further methods you need for driving the motors, evaluating the sensors etc.
 * 
 * Hint: Create an instance of PlotBotControl inside the class Plotbot and  * pass the PlotBotControl when calling the
 * method plot of the selected shape.
 */
public class PlotbotControl implements SensorPortListner{
	private int StartDis;
	private int WheelDiam;
	private int PenArmLength;
	private int SensorArmLength;
	private int PenHeight;
	private int GRArm;
	private int GRWheel;
	private int LightBool; 						//light threshold
	private LightSensor light;
	private TouchSensor touchSwivel;			//Touch sensor for the swivel arm
	private TouchSensor touchPen;
	private final int ORIGIN;
	private final int ARMMAX;
	private final int PENMAX;

	private PlotbotControl(){
		WheelDiam=56;
		StartDis=230;
		PenArmLength=80;
		SensorArmLength=105;
		GRArm=84;
		GRWheel=5;
		LightBool=500; //maybe
	}

	public double SwivelArm (int degree){
		double armAngle=0.0;
		Motor.A.rotateTo(degree);			//Still need to account for the MAX position of arm
		return armAngle;
	}
	
	public boolean SwivelPen (int degree){
		boolean up;
		Motor.B.rotateTo(degree);			//Still need to account for the MAX position of the pen
		return up;
	}
	
	public double Wheels (int degree){
		double wheelPos=0.0;
		Motor.C.rotateTo(degree);
		return wheelPos;
	}
	
	public boolean Calibration(){
		boolean calibration = false;
		light = new LightSensor(SensorPort.S3, false);
		touchSwivel = new TouchSensor(SensorPort.S1);
		touchPen = new TouchSensor(SensorPort.S2);
		while (light.getLightValue() > LightBool){
			Motor.C.backward();
		}
		ORIGIN = Motor.C.getPosition();
		while (touchSwivel.isPressed() != true){
			Motor.A.forward();
		}
		ARMMAX = Motor.A.getPosition();
		while (touchPen.isPressed() != true){
			Motor.B.backward();
		}
		PENMAX = Motor.B.getPosition();
		return calibration;
	}
	
}
